generator client {
  provider             = "prisma-client-js"
  log                 = ["query", "info", "warn", "error"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  name         String
  nickName     String
  nationality  String
  email        String            @unique
  createdAt    DateTime          @default(now())
  oauthId      String?           
  password     String
  provider     SocialProvider
  status       UserStatus        @default(ACTIVE)
  role         UserRole          @default(MEMBER)
  ownedPlanet  Planet[]
  planetsIn    PlanetMembership[]
  posts        Article[]
  spaceshipMemberships SpaceshipMember[]
  planetBookMark PlanetBookmark[]
  likedArticles Like[]           @relation("LikeToUser")
  comments      Comment[]
  chatMemberships ChatMembership[]
  sentMessages  Message[] 
  notifications Notification[] 
  reportsMade   Report[] 
  friends       UserFriend[]     @relation("UserToFriend")
  friendedBy    UserFriend[]     @relation("FriendToUser")
  deletedAt     DateTime?        @map("deleted_at") // 추가: soft delete 구현
}

model Article {
  id       Int     @id @default(autoincrement())
  title    String
  content  String?
  published Boolean? @default(true)
  author   User? @relation(fields:[authorId], references: [id])
  authorId Int?
  planet   Planet? @relation(fields:[planetId], references: [id])
  planetId Int?
  likes    Like[] @relation("LikeToArticle")
  comments Comment[]
  deletedAt DateTime? @map("deleted_at") // 추가: soft delete 구현
}

model Planet {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?
  owner        User              @relation(fields: [ownerId], references:[id])
  ownerId      Int
  memberLimit  Int?
  // latitude     Float?
  // longitude    Float?
  published    Boolean?          @default(true)
  isActive     Boolean           @default(true)
  shape        PlanetShape?
  hashtags     String[]
  spaceships   Spaceship[]
  articles     Article[]
  members      PlanetMembership[]
  planetBookMark PlanetBookmark[]
  deletedAt    DateTime?         @map("deleted_at") // 추가: soft delete 구현
}

model PlanetMembership {
  planet        Planet           @relation(fields:[planetId], references:[id])
  planetId      Int
  user          User             @relation(fields: [userId], references: [id])
  userId        Int
  administrator Boolean          @default(false)
  status        MembershipStatus @default(PENDING)
  @@id([planetId,userId])
}

model Chat {
  id          Int      @id @default(autoincrement())
  chatMemberships ChatMembership[]
  messages    Message[]
}

model ChatMembership {
  chatId Int
  chat Chat @relation(fields:[chatId], references:[id])
  userId Int
  user User @relation(fields: [userId], references: [id])
  
  @@id([chatId, userId])
}

model Message {
  id          Int     @id @default(autoincrement())
  content     String
  senderId    Int
  sender      User   @relation(fields: [senderId], references: [id])
  chatId      Int
  chat        Chat   @relation(fields: [chatId], references: [id])
  createdAt   DateTime @default(now())
}

model Comment {
  id          Int        @id @default(autoincrement())
  content     String
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  articleId   Int
  article     Article   @relation(fields: [articleId], references: [id])
  parentId    Int?      // 대댓글 기능을 위한 부모 댓글 ID
  children    Comment[] @relation("CommentToComment")
  parent      Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  createdAt   DateTime  @default(now())
}

model Like {
  userId      Int
  user        User      @relation("LikeToUser", fields: [userId], references: [id])
  articleId   Int
  article     Article   @relation("LikeToArticle", fields: [articleId], references: [id])
  @@id([userId, articleId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  content     String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}


model UserFriend {
  userId   Int
  user     User     @relation("UserToFriend", fields: [userId], references: [id])
  friendId Int
  friend   User     @relation("FriendToUser", fields: [friendId], references: [id])
  @@id([userId, friendId])
}

model Report {
  id          Int      @id @default(autoincrement())
  reason      String
  reporter    User     @relation(fields: [reporterId], references: [id])
  reporterId  Int
  targetId    Int
  targetType  ReportTargetType
  createdAt   DateTime @default(now())
  deletedAt   DateTime? @map("deleted_at") // 추가: soft delete 구현
}

model PlanetBookmark {
   userId   Int
   user     User     @relation(fields: [userId], references: [id])
   planetId Int
   planet   Planet   @relation(fields: [planetId], references: [id])
   @@id([userId, planetId])
}

model Spaceship {
  id          Int               @id @default(autoincrement())
  title       String           
  description String?         
  maxMembers  Int               
  status      SpaceshipStatus   @default(UPCOMING) 
  startDate   DateTime          
  endDate     DateTime          
  planetId    Int               
  planet      Planet            @relation(fields: [planetId], references: [id])
  members     SpaceshipMember[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model SpaceshipMember {
  id         Int       @id @default(autoincrement())
  spaceshipId Int      
  spaceship   Spaceship @relation(fields: [spaceshipId], references: [id])
  userId     Int      
  user       User      @relation(fields: [userId], references: [id])
  joinedAt   DateTime  @default(now())
}
model VerificationCode {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  code         String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

enum SocialProvider {
  GOOGLE
  NAVER
  KAKAO
  LOCAL
}

enum PlanetShape {
  SHAPE1
  SHAPE2
  SHAPE3
}

enum ReportTargetType {
   USER
   ARTICLE
   COMMENT
   MESSAGE
}

enum SpaceshipStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELED
}

enum UserRole {
  MEMBER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}
