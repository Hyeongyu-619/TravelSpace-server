generator client {
  provider = "prisma-client-js"
  log      = ["query", "info", "warn", "error"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  name                 String
  nickName             String
  nationality          String
  email                String             @unique
  createdAt            DateTime           @default(now())
  oauthId              String?
  password             String
  profileImage   String?
  provider             SocialProvider
  status               UserStatus         @default(ACTIVE)
  role                 UserRole           @default(MEMBER)
  deletedAt            DateTime?          @map("deleted_at")
  posts                Article[]
  chatMemberships      ChatMembership[]
  comments             Comment[]
  likedArticles        Like[]             @relation("LikeToUser")
  sentMessages         Message[]
  notifications        Notification[]
  ownedPlanet          Planet[]
  planetBookMark       PlanetBookmark[]
  planetsIn            PlanetMembership[]
  reportsMade          Report[]
  spaceshipMemberships SpaceshipMember[]
  friendedBy           UserFriend[]       @relation("FriendToUser")
  friends              UserFriend[]       @relation("UserToFriend")
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  published Boolean?  @default(true)
  authorId  Int?
  planetId  Int?
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  author    User?     @relation(fields: [authorId], references: [id])
  planet    Planet?   @relation(fields: [planetId], references: [id])
  comments  Comment[]
  likes     Like[]    @relation("LikeToArticle")
}

model Planet {
  id             Int                @id @default(autoincrement())
  name           String
  description    String?
  ownerId        Int
  memberLimit    Int?
  published      Boolean?           @default(true)
  isActive       Boolean            @default(true)
  shape          PlanetShape?
  hashtags       String[]
  deletedAt      DateTime?          @map("deleted_at")
  articles       Article[]
  owner          User               @relation(fields: [ownerId], references: [id])
  planetBookMark PlanetBookmark[]
  members        PlanetMembership[]
  spaceships     Spaceship[]
}

model PlanetMembership {
  planetId      Int
  userId        Int
  administrator Boolean          @default(false)
  status        MembershipStatus @default(PENDING)
  planet        Planet           @relation(fields: [planetId], references: [id])
  user          User             @relation(fields: [userId], references: [id])

  @@id([planetId, userId])
}

model Chat {
  id              Int              @id @default(autoincrement())
  chatMemberships ChatMembership[]
  messages        Message[]
}

model ChatMembership {
  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  chatId    Int
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  Int
  articleId Int
  parentId  Int?
  createdAt DateTime  @default(now())
  article   Article   @relation(fields: [articleId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
}

model Like {
  userId    Int
  articleId Int
  article   Article @relation("LikeToArticle", fields: [articleId], references: [id])
  user      User    @relation("LikeToUser", fields: [userId], references: [id])

  @@id([userId, articleId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserFriend {
  userId   Int
  friendId Int
  friend   User @relation("FriendToUser", fields: [friendId], references: [id])
  user     User @relation("UserToFriend", fields: [userId], references: [id])

  @@id([userId, friendId])
}

model Report {
  id         Int              @id @default(autoincrement())
  reason     String
  reporterId Int
  targetId   Int
  targetType ReportTargetType
  createdAt  DateTime         @default(now())
  deletedAt  DateTime?        @map("deleted_at")
  reporter   User             @relation(fields: [reporterId], references: [id])
}

model PlanetBookmark {
  userId   Int
  planetId Int
  planet   Planet @relation(fields: [planetId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([userId, planetId])
}

model Spaceship {
  id          Int               @id @default(autoincrement())
  name       String
  image String
  description String?
  maxMembers  Int
  ownerId        Int
  status      SpaceshipStatus   @default(UPCOMING)
  startDate   DateTime
  endDate     DateTime
  planetId    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  planet      Planet            @relation(fields: [planetId], references: [id])
  members     SpaceshipMember[]
}

model SpaceshipMember {
  id          Int       @id @default(autoincrement())
  spaceshipId Int
  userId      Int
  joinedAt    DateTime  @default(now())
  spaceship   Spaceship @relation(fields: [spaceshipId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model VerificationCode {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  code       String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  isVerified Boolean  @default(false)
}

enum SocialProvider {
  GOOGLE
  NAVER
  KAKAO
  LOCAL
}

enum PlanetShape {
  SHAPE1
  SHAPE2
  SHAPE3
}

enum ReportTargetType {
  USER
  ARTICLE
  COMMENT
  MESSAGE
}

enum SpaceshipStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELED
}

enum UserRole {
  MEMBER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}
